<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!-- edited with XMLSpy v2006 rel. 3 sp2 (http://www.altova.com) by University of Massachusetts Boston (University of Massachusetts Boston) -->
<!--W3C Schema generated by XMLSpy v2005 rel. 3 U (http://www.altova.com)-->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" elementFormDefault="qualified">
	<xs:complexType name="characterValueType">
		<xs:complexContent>
			<xs:extension base="rankLabelTextType">
				<xs:attribute name="value" type="xs:string">
					<xs:annotation>
						<xs:documentation>The name of the field/character of the taxon being described..For example 'FlowerColor'. </xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="groupType" mixed="true">
		<xs:complexContent mixed="true">
			<xs:extension base="rankLabelTextType">
				<xs:choice minOccurs="0" maxOccurs="unbounded">
					<xs:element name="characterValue">
						<xs:complexType>
							<xs:complexContent>
								<xs:extension base="characterValueType"/>
							</xs:complexContent>
						</xs:complexType>
					</xs:element>
					<xs:element name="groups" type="groupsType">
						<xs:annotation>
							<xs:documentation>Encapsulates the various groups making up a template chosen by an author. Each group id must be unique within the scope of the groups element. Each group id is resolvable by the xpath leading to that group. group's  could have the same id as long as they do not vbelong to the same parent directly.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:choice>
				<xs:attribute name="id" type="xs:string" use="required">
					<xs:annotation>
						<xs:documentation>All groups with the same ID are handled the same way by an XSLT template</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="taxonPageTemplateType">
		<xs:sequence>
			<xs:element name="XSLFileNames" type="xslFileNamesType"/>
		</xs:sequence>
		<xs:attribute name="datasourceName" use="required">
			<xs:annotation>
				<xs:documentation>The name of the datasource whose data will be transformed using a given XSL File and the configured data for the datasource. This name must be unique within the scope of a TaxonPageTemplate element. see unique constraint on root element.</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:minLength value="1"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
	<xs:element name="TaxonPageTemplates">
		<xs:annotation>
			<xs:documentation>The root of all datasources configured to use templates in the EFG or perhaps elsewhere</xs:documentation>
		</xs:annotation>
		<xs:complexType>
			<xs:sequence>
				<xs:element name="TaxonPageTemplate" type="taxonPageTemplateType" maxOccurs="unbounded"/>
			</xs:sequence>
		</xs:complexType>
		<xs:unique name="datasourcename_unique">
			<xs:selector xpath="TaxonPageTemplate">
				<xs:annotation>
					<xs:documentation>Each taxonPageTemplate must have a unique datasource name.ie A datasource cannot be associated to more than one template</xs:documentation>
				</xs:annotation>
			</xs:selector>
			<xs:field xpath="@datasourceName">
				<xs:annotation>
					<xs:documentation>The field that must be unique throughout the document.</xs:documentation>
				</xs:annotation>
			</xs:field>
		</xs:unique>
	</xs:element>
	<xs:complexType name="rankLabelTextType">
		<xs:attribute name="rank" type="xs:int" use="required">
			<xs:annotation>
				<xs:documentation>Determines the order in which fields/characters are arranged within a container (group or characterValue Type)</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="label" type="xs:string">
			<xs:annotation>
				<xs:documentation>A label for the whole group/character.Could be used to tag a set of characters for example on an html page..A label to be used instead of the field or character name..For instance an author could chose to display 'FlowerColor' as "Flower Color"(note the space between the two words)</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="text" type="xs:string">
			<xs:annotation>
				<xs:documentation>A piece of text that could be displayed instead of the value of the character(states) from the datasource. </xs:documentation>
			</xs:annotation>
		</xs:attribute>
	</xs:complexType>
	<xs:complexType name="groupsType">
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="group" type="groupType"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="xslFileNamesType">
		<xs:sequence>
			<xs:element name="xslPlatePages" type="xslPageType">
				<xs:annotation>
					<xs:documentation>Encapsulates one or more xsl files to be used to generate plates for each datasource.</xs:documentation>
				</xs:annotation>
				<xs:unique name="xslPlatesPage_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@displayName"/>
				</xs:unique>
				<xs:unique name="xslPlatesPageguid_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@guid"/>
				</xs:unique>
			</xs:element>
			<xs:element name="xslListPages" type="xslPageType">
				<xs:annotation>
					<xs:documentation>Encapsulates one or more xsl files to be used to generate lists for each datasource.</xs:documentation>
				</xs:annotation>
				<xs:unique name="xslListPage_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@displayName"/>
				</xs:unique>
				<xs:unique name="xslListPageguid_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@guid"/>
				</xs:unique>
			</xs:element>
			<xs:element name="xslTaxonPages" type="xslPageType">
				<xs:annotation>
					<xs:documentation>Encapsulates one or more xsl files to be used to generate taxon pages for each datasource.</xs:documentation>
				</xs:annotation>
				<xs:unique name="xslTaxonPage_unique">
					<xs:selector xpath=".//XSLPage"/>
					<xs:field xpath="@displayName"/>
				</xs:unique>
				<xs:unique name="xslTaxonPageguid_unique">
					<xs:selector xpath=".//XSLPage"/>
					<xs:field xpath="@guid"/>
				</xs:unique>
			</xs:element>
			<xs:element name="xslPdfPages" type="xslPageType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>handles pdf plates</xs:documentation>
				</xs:annotation>
				<xs:unique name="xslPdfPage_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@displayName"/>
				</xs:unique>
				<xs:unique name="xslPdfPageguid_unique">
					<xs:selector xpath="xslPage"/>
					<xs:field xpath="@guid"/>
				</xs:unique>
			</xs:element>
			<xs:element name="xslSearchPages" type="xslPageType" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Handles search pages</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="xslPageType">
		<xs:annotation>
			<xs:documentation>The page type as determined by the element.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="xslPage" maxOccurs="unbounded">
				<xs:annotation>
					<xs:documentation>made up of one or more xslPage elements. Each element encapsulates a file which must be unque within the container. If isDefault is true, then applications may apply this xslFile to all requests</xs:documentation>
				</xs:annotation>
				<xs:complexType>
					<xs:sequence minOccurs="0">
						<xs:element name="groups" type="groupsType">
							<xs:annotation>
								<xs:documentation>Encapsulates the various groups making up a template chosen by an author. Each group id must be unique within the scope of the groups element. Each group id is resolvable by the xpath leading to that group. group's  could have the same id as long as they do not vbelong to the same parent directly.</xs:documentation>
							</xs:annotation>
						</xs:element>
					</xs:sequence>
					<xs:attribute name="fileName" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:minLength value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="guid" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:minLength value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="displayName" use="required">
						<xs:simpleType>
							<xs:restriction base="xs:string">
								<xs:minLength value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="jspName" type="xs:string"/>
					<xs:attribute name="isDefault" type="xs:boolean" default="false"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
</xs:schema>
