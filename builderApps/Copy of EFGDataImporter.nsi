; Script generated by the HM NIS Edit Script Wizard.
 /** This file is part of the UMB Electronic Field Guide.
 * UMB Electronic Field Guide is free software; you can redistribute it 
 * and/or modify it under the terms of the GNU General Public License 
 * as published by the Free Software Foundation; either version 2, or 
 * (at your option) any later version.
 *
 * UMB Electronic Field Guide is distributed in the hope that it will be
 * useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with the UMB Electronic Field Guide; see the file COPYING.
 * If not, write to:
 * Free Software Foundation, Inc.
 * 59 Temple Place, Suite 330
 * Boston, MA 02111-1307
 * USA
 
*$Id$
*(c) UMASS,Boston, MA
*Written by Jacob K. Asiedu for EFG project
*/

;----------------------------------------------------------
; Install Sections
;----------------------------------------------------------

/**
*Do nothing Section a place holder to do other initialization stuff
*/
Section  ""

SectionEnd

/**
* Installs the EFGDataImporter Configurator Application
*/
Section "-EFG Data Importer" SecComponentsDataImporter
  SetDetailsPrint textonly
  DetailPrint "Installing the Components for the EFG Data Importer | Data Importer Interface..."
  SetDetailsPrint listonly
  CreateDirectory "${EFG2_IMPORTER_DIR}"
  SetOutPath "${EFG2_IMPORTER_DIR}"
  File "${EFG2_PRODUCT_SOURCE_DIR}\schema\*.*"
  File "${EFG_INSTALLER_SMALL_ICON}"
  File "${EFG_INSTALLER_BIG_ICON}"
  File "${EFG2_PRODUCT_SOURCE_DIR}\efg2.xml"
  SetOutPath "${EFG2_IMPORTER_DIR}\docs"
  ;File "${EFG2_PRODUCT_SOURCE_DIR}\docs\*.html"
  ;File "${EFG2_PRODUCT_SOURCE_DIR}\docs\*.jpg"
  
  SetOutPath "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}"
  File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_EXECUTABLE}"
  File "${EFG2_PRODUCT_SOURCE_LIB}*.jar"
  File "${EFG2_PRODUCT_SOURCE_LIB}*.properties"
  File "${EFG2_PRODUCT_SOURCE_LIB}*.csv"
  File "${EFG2_PRODUCT_SOURCE_LIB}\tomcatusers.bat"
  
  SetOutPath "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\icons"
  File "${EFG2_PRODUCT_SOURCE_LIB}icons\*.*"

  SetOutPath "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\help"
  File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_LIB}\help\*.*"
  
  SetOutPath "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\samples"
  File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_LIB}\data\IpoTest.csv"
  
SectionEnd

/**
* Installs the Web Application
*/
Section "-EFG Data Importer Application" SecComponentsDataImporterApp
    SetDetailsPrint textonly
    DetailPrint "Installing EFG Data Importer and Web Application | Data Importer and Web Application Interface..."
    SetDetailsPrint listonly
    ;Tomcat directory
    ;Find out if 'bin' exists in the name
    call startInstallation
    /*Push $CURRENT_TOMCAT
    Push "bin" 
    Push "<"
    Call StrLoc
    pop $R0
    StrCmp $R0 "" foundReg notFoundReg
    
    notFoundReg:
        ExecWait '"$CURRENT_TOMCAT\shutdown.bat"'
        IfErrors tcnotrunning1 tcrunning1
        
        tcnotrunning1:
            StrCpy $isTomcatRunning "false"
            Goto sl1
        tcrunning1:
            Sleep 5000
            StrCpy $isTomcatRunning "true"
            Goto sl1
        sl1: 
            Call copyToWebApps
            Strcmp $isTomcatRunning "true" 0 end
            ExecWait '"$CURRENT_TOMCAT\startup.bat"'
            Sleep 5000
            Goto end

    foundReg: 
        ExecWait 'cmd /C net stop "$CURRENT_TOMCAT"'
        IfErrors tcnotrunning tcrunning 
   
    tcnotrunning:
        StrCpy $isTomcatRunning "false"
        Goto sl
    tcrunning:
        Sleep 5000
        StrCpy $isTomcatRunning "true"
        Goto sl

    sl:
        /*
        Find out if tomcat-users.xml already exists
        if it does rename it as tomcat-users_replace_efg.xml
         then insert the contents of the efg tomcat-users in there
         This will be redundant when we move all template editing 
         to a java application
        */
        ;copy efg2.xml
       */ 
       
    end:
SectionEnd
Function CopyFiles
        Call copyToWebApps
        clearErrors
        SetOutPath "$TEMP"
        SetOverwrite try
        File "${TOMCAT_USER_EXEC}"
        File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_LIB}\*.jar"
        File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_LIB}\*.properties"
        ExecWait '${TOMCAT_USER_EXEC} "$CATALINA_HOME"'
        sleep 500
        Delete "$TEMP\${TOMCAT_USER_BATCH}"
        Delete "$TEMP\*.jar"
        Delete "$TEMP\*.properties"
        Strcmp $isTomcatRunning "true" 0 end
        ExecWait 'cmd /C net start "$CURRENT_TOMCAT"'
        Sleep 5000
        clearErrors
FunctionEnd
Function copyToWebApps
    SetOutPath "$CATALINA_HOME\conf\Catalina\localhost" 
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\efg2.xml"
        
    ;copy mysql driver
    SetOutPath "$CATALINA_HOME\common\lib" 
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\${EFG2_IMPORTER_LIB}\mysqldriver.jar"
    ;Copy war file to webapps
    SetOutPath "$WEB_APPS_LOCATION\efg2"
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\efg2\index.html"
    
    SetOutPath "$WEB_APPS_LOCATION\efg2\EFGImages"
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\efg2\index.html"
    
    SetOutPath "$WEB_APPS_LOCATION\efg2\WEB-INF"
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\efgRDB\etc\web.xml"
    
    ;FIX ME use program to install this
    /*SetOutPath "$CATALINA_HOME\conf"
    SetOverwrite try
    File "${EFG2_PRODUCT_SOURCE_DIR}\tomcat-users.xml"*/
    ;execute java to write/edit tomcat-users file
FunctionEnd





/*SectionGroupEnd*/
 /**
 * Insert additional icons
 */
Section -AdditionalIcons
  WriteIniStr "$INSTDIR\EFGDataImporter${PRODUCT_VERSION}.url" "InternetShortcut" "URL" "${PRODUCT_WEB_SITE}"
  CreateDirectory "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}"
   CreateDirectory "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\${IMPORTER_SAMPLES_DIR}"
  CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\Website.lnk" "$INSTDIR\EFGDataImporter${PRODUCT_VERSION}.url"
  CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\Uninstall.lnk" "${EFG2_IMPORTER_DIR}\uninstEFGDataImporter${PRODUCT_VERSION}.exe"
;do only when the EFGIMPORTER option is selected
 CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\${IMPORTER_LINK_NAME}.lnk" "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\${IMPORTER_EXECUTABLE}" "" "${EFG2_IMPORTER_DIR}\${EFG_IMPORTER_ICON}"
 
 
 CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\manual.lnk" "${EFG2_IMPORTER_DIR}\docs\manual.html"
 ; sample file
 CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\${IMPORTER_SAMPLES_DIR}\${VIEW_SAMPLE_KEY}.lnk" "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\${IMPORTER_SAMPLES_DIR}\${SAMPLE_KEY}"
 FileOpen $4 "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\${IMPORTER_LOGS_NAME}" w
 FileClose $4
 sleep 50
 CreateShortCut "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}\${IMPORTER_LINK_NAME}${SPACE}${IMPORTER_LOGS_NAME}.lnk" "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\${IMPORTER_LOGS_NAME}" 
SectionEnd
/**
* Post installation stuff
*/
Section -Post
 CreateDirectory "${EFG2_IMPORTER_DIR}"
  WriteUninstaller "${EFG2_IMPORTER_DIR}\uninstEFGDataImporter${PRODUCT_VERSION}.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayName" "$(^Name)"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "EFG2HOME" "$INSTDIR"  
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "CATALINA_HOME" "$CATALINA_HOME" 
  ;Write to file  
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${WEB_APPS_HOME}" "$WEB_APPS_LOCATION"
  ;write to file
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${UNINSTALL_STRING}" "${EFG2_IMPORTER_DIR}\uninstEFGDataImporter${PRODUCT_VERSION}.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "EFG2" "${EFG2_IMPORTER_DIR}\uninstEFGDataImporter${PRODUCT_VERSION}.exe"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "DisplayIcon" "${EFG2_IMPORTER_DIR}\${EFG_IMPORTER_ICON}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${DISPLAY_VERSION}" "${PRODUCT_VERSION}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "URLInfoAbout" "${PRODUCT_WEB_SITE}"
  WriteRegStr ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "Publisher" "${PRODUCT_PUBLISHER}"
  ;Call addEnvVar
  ;Call addPath
 
  CreateShortCut "$DESKTOP\${IMPORTER_LINK_NAME}.lnk" "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}\${IMPORTER_EXECUTABLE}" "" "${EFG2_IMPORTER_DIR}\${EFG_IMPORTER_BIG_ICON}"
  
;add Comment Manager links
SectionEnd
ShowInstDetails show
ShowUnInstDetails show






;----------------
;Installer Functions
;----------------------
;!ifndef _AddToPath_nsh
;!define _AddToPath_nsh
 
;!verbose 3
;!include "WinMessages.NSH"
;!verbose 4
 
/**
* AddToPath - Adds the given dir to the search path.
*        Input - head of the stack
*        Note - Win9x systems requires reboot
*/
/*Var WriteEnvStr_RegKey
Function AddToPath
  Exch $0
  Push $1
  Push $2
  Push $3
 
  # don't add if the path doesn't exist
  IfFileExists "$0\*.*" "" AddToPath_done
 
  ReadEnvStr $1 PATH
  Push "$1;"
  Push "$0;"
  Call StrStr
  Pop $2
  StrCmp $2 "" "" AddToPath_done
  Push "$1;"
  Push "$0\;"
  Call StrStr
  Pop $2
  StrCmp $2 "" "" AddToPath_done
  GetFullPathName /SHORT $3 $0
  Push "$1;"
  Push "$3;"
  Call StrStr
  Pop $2
  StrCmp $2 "" "" AddToPath_done
  Push "$1;"
  Push "$3\;"
  Call StrStr
  Pop $2
  StrCmp $2 "" "" AddToPath_done
 
  Call IsNT
  Pop $1
  StrCmp $1 1 AddToPath_NT
    ; Not on NT
    StrCpy $1 $WINDIR 2
    FileOpen $1 "$1\autoexec.bat" a
    FileSeek $1 -1 END
    FileReadByte $1 $2
    IntCmp $2 26 0 +2 +2 # DOS EOF
      FileSeek $1 -1 END # write over EOF
    FileWrite $1 "$\r$\nSET PATH=%PATH%;$3$\r$\n"
    FileClose $1
    SetRebootFlag true
    Goto AddToPath_done
 
  AddToPath_NT:
    ReadRegStr $1 SHCTX "$WriteEnvStr_RegKey" "PATH"
    StrCpy $2 $1 1 -1 # copy last char
    StrCmp $2 ";" 0 +2 # if last char == ;
      StrCpy $1 $1 -1 # remove last char
    StrCmp $1 "" AddToPath_NTdoIt
      StrCpy $0 "$1;$0"
    AddToPath_NTdoIt:
    
      WriteRegExpandStr SHCTX "$WriteEnvStr_RegKey" "PATH" $0
      SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000
 
  AddToPath_done:
    Pop $3
    Pop $2
    Pop $1
    Pop $0
FunctionEnd
 */
; RemoveFromPath - Remove a given dir from the path
;     Input: head of the stack
/*!macro RemoveFromPath UN
Function ${UN}RemoveFromPath
  Exch $0
  Push $1
  Push $2
  Push $3
  Push $4
  Push $5
  Push $6
 
  IntFmt $6 "%c" 26 # DOS EOF
 
  Call ${UN}IsNT
  Pop $1
  StrCmp $1 1 unRemoveFromPath_NT
    ; Not on NT
    StrCpy $1 $WINDIR 2
    FileOpen $1 "$1\autoexec.bat" r
    GetTempFileName $4
    FileOpen $2 $4 w
    GetFullPathName /SHORT $0 $0
    StrCpy $0 "SET PATH=%PATH%;$0"
    Goto unRemoveFromPath_dosLoop
 
    unRemoveFromPath_dosLoop:
      FileRead $1 $3
      StrCpy $5 $3 1 -1 # read last char
      StrCmp $5 $6 0 +2 # if DOS EOF
        StrCpy $3 $3 -1 # remove DOS EOF so we can compare
      StrCmp $3 "$0$\r$\n" unRemoveFromPath_dosLoopRemoveLine
      StrCmp $3 "$0$\n" unRemoveFromPath_dosLoopRemoveLine
      StrCmp $3 "$0" unRemoveFromPath_dosLoopRemoveLine
      StrCmp $3 "" unRemoveFromPath_dosLoopEnd
      FileWrite $2 $3
      Goto unRemoveFromPath_dosLoop
      unRemoveFromPath_dosLoopRemoveLine:
        SetRebootFlag true
        Goto unRemoveFromPath_dosLoop
 
    unRemoveFromPath_dosLoopEnd:
      FileClose $2
      FileClose $1
      StrCpy $1 $WINDIR 2
      Delete "$1\autoexec.bat"
      CopyFiles /SILENT $4 "$1\autoexec.bat"
      Delete $4
      Goto unRemoveFromPath_done
 
  unRemoveFromPath_NT:
    ReadRegStr $1 SHCTX "$WriteEnvStr_RegKey" "PATH"
    StrCpy $5 $1 1 -1 # copy last char
    StrCmp $5 ";" +2 # if last char != ;
      StrCpy $1 "$1;" # append ;
    Push $1
    Push "$0;"
    Call ${un}StrStr ; Find `$0;` in $1
    Pop $2 ; pos of our dir
    StrCmp $2 "" unRemoveFromPath_done
      ; else, it is in path
      # $0 - path to add
      # $1 - path var
      StrLen $3 "$0;"
      StrLen $4 $2
      StrCpy $5 $1 -$4 # $5 is now the part before the path to remove
      StrCpy $6 $2 "" $3 # $6 is now the part after the path to remove
      StrCpy $3 $5$6
 
      StrCpy $5 $3 1 -1 # copy last char
      StrCmp $5 ";" 0 +2 # if last char == ;
        StrCpy $3 $3 -1 # remove last char
     
      WriteRegExpandStr SHCTX "$WriteEnvStr_RegKey" "PATH" $3
      SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000
 
  unRemoveFromPath_done:
    Pop $6
    Pop $5
    Pop $4
    Pop $3
    Pop $2
    Pop $1
    Pop $0
FunctionEnd
 !macroend
 !insertmacro RemoveFromPath ""
!insertmacro RemoveFromPath "un."
 */
 
; AddToEnvVar - Adds the given value to the given environment var
;        Input - head of the stack $0 environement variable $1=value to add
;        Note - Win9x systems requires reboot
 
/*Function AddToEnvVar
 
  Exch $1 ; $1 has environment variable value
  Exch
  Exch $0 ; $0 has environment variable name
 
  DetailPrint "Adding $1 to $0"
  Push $2
  Push $3
  Push $4
 
 
  ReadEnvStr $2 $0
  Push "$2;"
  Push "$1;"
  Call StrStr
  Pop $3
  StrCmp $3 "" "" AddToEnvVar_done
 
  Push "$2;"
  Push "$1\;"
  Call StrStr
  Pop $3
  StrCmp $3 "" "" AddToEnvVar_done
  
 
  Call IsNT
  Pop $2
  StrCmp $2 1 AddToEnvVar_NT
    ; Not on NT
    StrCpy $2 $WINDIR 2
    FileOpen $2 "$2\autoexec.bat" a
    FileSeek $2 -1 END
    FileReadByte $2 $3
    IntCmp $3 26 0 +2 +2 # DOS EOF
      FileSeek $2 -1 END # write over EOF
    FileWrite $2 "$\r$\nSET $0=%$0%;$4$\r$\n"
    FileClose $2
    SetRebootFlag true
    Goto AddToEnvVar_done
 
  AddToEnvVar_NT:
    ReadRegStr $2  SHCTX "$WriteEnvStr_RegKey" $0
    StrCpy $3 $2 1 -1 # copy last char
    StrCmp $3 ";" 0 +2 # if last char == ;
      StrCpy $2 $2 -1 # remove last char
    StrCmp $2 "" AddToEnvVar_NTdoIt
      StrCpy $1 "$2;$1"
    AddToEnvVar_NTdoIt:
      WriteRegExpandStr  SHCTX "$WriteEnvStr_RegKey" $0 $1
      SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000
 
  AddToEnvVar_done:
    Pop $4
    Pop $3
    Pop $2
    Pop $1
    Pop $0
 
FunctionEnd
 
; RemoveFromEnvVar - Remove a given value from a environment var
;     Input: head of the stack
!macro RemoveFromEnvVar un
Function ${un}RemoveFromEnvVar 
  Exch $1 ; $1 has environment variable value
  Exch
  Exch $0 ; $0 has environment variable name
 
  DetailPrint "Removing $1 from $0"
  Push $2
  Push $3
  Push $4
  Push $5
  Push $6
  Push $7
 
  IntFmt $7 "%c" 26 # DOS EOF
 
  Call ${un}IsNT
  Pop $2
  StrCmp $2 1 unRemoveFromEnvVar_NT
    ; Not on NT
    StrCpy $2 $WINDIR 2
    FileOpen $2 "$2\autoexec.bat" r
    GetTempFileName $5
    FileOpen $3 $5 w
    GetFullPathName /SHORT $1 $1
    StrCpy $1 "SET $0=%$0%;$1"
    Goto unRemoveFromEnvVar_dosLoop
 
    unRemoveFromEnvVar_dosLoop:
      FileRead $2 $4
      StrCpy $6 $4 1 -1 # read last char
      StrCmp $6 $7 0 +2 # if DOS EOF
        StrCpy $4 $4 -1 # remove DOS EOF so we can compare
      StrCmp $4 "$1$\r$\n" unRemoveFromEnvVar_dosLoopRemoveLine
      StrCmp $4 "$1$\n" unRemoveFromEnvVar_dosLoopRemoveLine
      StrCmp $4 "$1" unRemoveFromEnvVar_dosLoopRemoveLine
      StrCmp $4 "" unRemoveFromEnvVar_dosLoopEnd
      FileWrite $3 $4
      Goto unRemoveFromEnvVar_dosLoop
      unRemoveFromEnvVar_dosLoopRemoveLine:
        SetRebootFlag true
        Goto unRemoveFromEnvVar_dosLoop
 
    unRemoveFromEnvVar_dosLoopEnd:
      FileClose $3
      FileClose $2
      StrCpy $2 $WINDIR 2
      Delete "$2\autoexec.bat"
      CopyFiles /SILENT $5 "$2\autoexec.bat"
      Delete $5
      Goto unRemoveFromEnvVar_done
 
  unRemoveFromEnvVar_NT:
    ReadRegStr $2 SHCTX "$WriteEnvStr_RegKey" $0
    StrCpy $6 $2 1 -1 # copy last char
    StrCmp $6 ";" +2 # if last char != ;
      StrCpy $2 "$2;" # append ;
    Push $2
    Push "$1;"
    Call ${un}StrStr ; Find `$1;` in $2
    Pop $3 ; pos of our dir
    StrCmp $3 "" unRemoveFromEnvVar_done
      ; else, it is in path
      # $1 - path to add
      # $2 - path var
      StrLen $4 "$1;"
      StrLen $5 $3
      StrCpy $6 $2 -$5 # $6 is now the part before the path to remove
      StrCpy $7 $3 "" $4 # $7 is now the part after the path to remove
      StrCpy $4 $6$7
 
      StrCpy $6 $4 1 -1 # copy last char
      StrCmp $6 ";" 0 +2 # if last char == ;
      StrCpy $4 $4 -1 # remove last char
      WriteRegExpandStr SHCTX "$WriteEnvStr_RegKey" $0 $4
      SendMessage ${HWND_BROADCAST} ${WM_WININICHANGE} 0 "STR:Environment" /TIMEOUT=5000
 
  unRemoveFromEnvVar_done:
    Pop $7
    Pop $6
    Pop $5
    Pop $4
    Pop $3
    Pop $2
    Pop $1
    Pop $0
FunctionEnd
 !macroend
!insertmacro RemoveFromEnvVar ""
!insertmacro RemoveFromEnvVar "un."
 */
 

 
;!endif ; _AddToPath_nsh 
 
/**
* Prompts user to indicate how(for current user or for all users of this system) they will want the application installed 
*/
Function PageInitInstall
   !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 1" "Text" "Indicate whether you want to install the application for all users or for the current user only. Select the operation you want to perform and click Next to continue."
   !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 2" "Text" "For All Users"
   !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 3" "Text" "For Current User Only"
   !insertmacro MUI_HEADER_TEXT "Installation Option" "Choose an option to install"
   StrCpy $R0 "2"
   
   !insertmacro MUI_INSTALLOPTIONS_DISPLAY "${EFG2_DataImporter_INI}"
FunctionEnd
/**
* This function is automatically called by System after exiting the PageInitInstall function
* Does the necessary house keeping after users choice in the above function
*/
Function PageLeaveInitInstall
 !insertmacro MUI_INSTALLOPTIONS_READ $R1 "${EFG2_DataImporter_INI}" "Field 2" "State"
 StrCmp $R0 "2" 0 Next
 StrCmp $R1 "1" all current

all:
StrCpy $WriteEnvStr_RegKey "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"
 SetShellVarContext all
Goto end

current:
 SetShellVarContext current
 StrCpy $WriteEnvStr_RegKey "Environment"
Goto end

 Next:
 MessageBox MB_OK|MB_TOPMOST "You need to make a selection.Exiting installation"
 Quit

end:
   Call checkPreInstallationRequirements
FunctionEnd

/**
* Write an Environment variable
*/
Function addEnvVar
 
  
  ; if CATALINA_HOME environment variable does not exists add it
  ReadEnvStr $R0 CATALINA_HOME
  IfErrors 0 end
  
  Push "${CATALINA_HOME_NAME}"
  Push "$CATALINA_HOME"
  Call AddToEnvVar
  
  ReadEnvStr $R0 CATALINA_HOME
  MessageBox MB_OK "$R0"
  
  end:
   Push "${WEB_APPS_HOME}"
  Push "$WEB_APPS_LOCATION\..\"
  Call AddToEnvVar
  
FunctionEnd

/**
* Insert into Current user Path variable
*/
Function addPath
 Push "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}"
 Call AddToPath
FunctionEnd
;--------------------------------
/**
*initialization page
* Installer is a Singleton. Only one of it can run at a time
*/
Function .onInit
System::Call "kernel32::CreateMutexA(i 0, i 0, t '$(^Name)') i .r0 ?e"
 Pop $0
 StrCmp $0 0 launch
  StrLen $0 "$(^Name)"
  IntOp $0 $0 + 1
 loop:
   FindWindow $1 '#32770' '' 0 $1
   IntCmp $1 0 +4
   System::Call "user32::GetWindowText(i r1, t .r2, i r0) i."
   StrCmp $2 "$(^Name)" 0 loop
   System::Call "user32::SetForegroundWindow(i r1) i."
   Abort
   Goto End
 launch:
 !insertmacro MUI_INSTALLOPTIONS_EXTRACT "${EFG2_DataImporter_INI}"
   SetAutoClose true
   End:
FunctionEnd
; Do nothing for now
Function .onSelChange

FunctionEnd
/**
*Check preinstallation requirements. If java and Tomcat do nto exists install them
*/
Function checkPreInstallationRequirements
  Call CheckJDK
  Call CheckTomcat
  Call CheckMySQL
FunctionEnd

/**
*Version compare..Call this function at start of installation
*Thanks Afrow UK (Based on his Function "VersionCheckNew2")
*Compare version numbers.
*Syntax:
*${VersionCompare} "[Version1]" "[Version2]" $var
 
*"[Version1]"        First version
*"[Version2]"         Second version
*$var                 Result:
                       $var=0  Versions are equal
                       $var=1  Version1 is newer
                       $var=2  Version2 is newer 
 */
Function VersionCompare
    !define VersionCompare `!insertmacro VersionCompareCall`
 
    !macro VersionCompareCall _VER1 _VER2 _RESULT
        Push `${_VER1}`
        Push `${_VER2}`
        Call VersionCompare
        Pop ${_RESULT}
    !macroend
 
    Exch $1
    Exch
    Exch $0
    Exch
    Push $2
    Push $3
    Push $4
    Push $5
    Push $6
    Push $7
 
    begin:
    StrCpy $2 -1
    IntOp $2 $2 + 1
    StrCpy $3 $0 1 $2
    StrCmp $3 '' +2
    StrCmp $3 '.' 0 -3
    StrCpy $4 $0 $2
    IntOp $2 $2 + 1
    StrCpy $0 $0 '' $2
 
    StrCpy $2 -1
    IntOp $2 $2 + 1
    StrCpy $3 $1 1 $2
    StrCmp $3 '' +2
    StrCmp $3 '.' 0 -3
    StrCpy $5 $1 $2
    IntOp $2 $2 + 1
    StrCpy $1 $1 '' $2
 
    StrCmp $4$5 '' equal
 
    StrCpy $6 -1
    IntOp $6 $6 + 1
    StrCpy $3 $4 1 $6
    StrCmp $3 '0' -2
    StrCmp $3 '' 0 +2
    StrCpy $4 0
 
    StrCpy $7 -1
    IntOp $7 $7 + 1
    StrCpy $3 $5 1 $7
    StrCmp $3 '0' -2
    StrCmp $3 '' 0 +2
    StrCpy $5 0
 
    StrCmp $4 0 0 +2
    StrCmp $5 0 begin newer2
    StrCmp $5 0 newer1
    IntCmp $6 $7 0 newer1 newer2
 
    StrCpy $4 '1$4'
    StrCpy $5 '1$5'
    IntCmp $4 $5 begin newer2 newer1
 
    equal:
    StrCpy $0 0
    goto end
    newer1:
    StrCpy $0 1
    goto end
    newer2:
    StrCpy $0 2
        end:
    Pop $7
    Pop $6
    Pop $5
    Pop $4
    Pop $3
    Pop $2
    Pop $1
    Exch $0

FunctionEnd



/**
*Checks to see if application is already installed.
* If it is, the version is checked to see if it is the same as the current version
* The appropriate prompts are issued to user on what to do next.
*/ 
Function PageReinstall
 ;find out if it is installed in HKLM or HKCU
 ;if it is read registry and handle appropriately
 ;${VersionCompare} "[Version1]" "[Version2]" $var
 ; Intcmp val1 val2 jump_if_equal [jump_if_val1_less] [jump_if_val1_more]

 ;Find out if it is installed in HKLM (for all users)
  ReadRegStr $R0 HKLM "${PRODUCT_UNINST_KEY}" "${DISPLAY_VERSION}"
  StrCmp $R0 "" detectHKCUVersion
  SetShellVarContext all
  StrCpy $WriteEnvStr_RegKey "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"
  
  ;set to all users
  Goto detectVersion

  ;Find out if it is installed in HKCU(for only current user)
  detectHKCUVersion:    
   ReadRegStr $R0 HKCU "${PRODUCT_UNINST_KEY}" "${DISPLAY_VERSION}"
   StrCmp $R0 ""  Continue ;This application is not installed on the current computer
  ;set to current user 
   SetShellVarContext current
   StrCpy $WriteEnvStr_RegKey "Environment"
  Goto detectVersion
  

  ;Detect the installed version
  detectVersion:
   StrCpy $INSTALLED_VERSION $R0
   ${VersionCompare} "$INSTALLED_VERSION" "${PRODUCT_VERSION}" $R0 ; compare current version to installed version
   IntCmp $R0 1 new_version same_version older_version 

 ; Installed version is older than the current version
  new_version:
    StrCpy $R0 "1"
    Goto reinst_start

  ; Installed version is newer than current version
  older_version:
   StrCpy $R0 "1"
   Goto reinst_start
 
 ;installed version is same as current version
  same_version:
    !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 1" "Text" "$(^Name) is already installed. Select the operation you want to perform and click Next to continue."
   !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 2" "Text" "Add/Reinstall components"
   !insertmacro MUI_INSTALLOPTIONS_WRITE "${EFG2_DataImporter_INI}" "Field 3" "Text" "Uninstall EFGDataImporter"
   !insertmacro MUI_HEADER_TEXT "Already Installed" "Choose the maintenance option to perform."
   StrCpy $R0 "2"
  
  reinst_start:
   !insertmacro MUI_INSTALLOPTIONS_DISPLAY "${EFG2_DataImporter_INI}"

Continue:
FunctionEnd

/**
* System calls this function after it leaves the reinstall page. 
*Function does necessary work required to exit PageReinstall function
*/
Function PageLeaveReinstall
 !insertmacro MUI_INSTALLOPTIONS_READ $R1 "${EFG2_DataImporter_INI}" "Field 2" "State"
 StrCmp $R0 "1" 0 Next1
 StrCmp $R1 "1" reinst_done

 Next1:
  StrCmp $R0 "2" 0 hideWindow
  StrCmp $R1 "1" reinst_done reinst_uninstall

 reinst_uninstall:
  ReadRegStr $R1 ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}" "${UNINSTALL_STRING}"

 ;Run uninstaller
 hideWindow:
  ;HideWindow
  ClearErrors
  MessageBox MB_YESNO|MB_TOPMOST "Unistalling this application will cause you to lose all$\r\
                      of the keys/configuration that you have deployed to the web application.$\r\
                      Do you still want to remove it?" IDNO reinst_done
 Call removeApplications
 SetAutoClose true

 IfErrors no_remove_uninstaller
  MessageBox MB_OK|MB_TOPMOST "An error occured while trying to uninstall  $(^Name)" 
 SetAutoClose true

  no_remove_uninstaller:
  MessageBox MB_OK|MB_TOPMOST "The $(^Name) has been uninstalled successfully" 
  Quit

  reinst_done:
FunctionEnd

/**
* Checks for the existence of a JDK. If one does not exists System installs one for user
*/
Function CheckJDK
  Push $R0
 
  ClearErrors
  ReadRegStr $R0 HKLM "SOFTWARE\JavaSoft\Java Development Kit\1.4" "JavaHome"
  IfErrors 0 Continue
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "SOFTWARE\JavaSoft\Java Development Kit\1.4" "JavaHome"
  IfErrors 0 Continue
  MessageBox MB_YESNO "Java development Kit 1.4 is not installed on this system. $\r\
  EFGDataImporter application needs JDK1.4 to run.$\r Do you want to install it now?" IDNO Noinstall
  SetOutPath "$TEMP"
  SetOverwrite try
  File "${JDK_SOURCE_DIR}\${JDK_SOURCE_NAME}"
  ExecWait "$TEMP\${JDK_SOURCE_NAME}" $0

  sleep 5000	
 StrCmp $0 "0" 0 Noinstall
  SetRebootFlag true
  Goto Continue
 
  Noinstall:
   Pop $R0
   Pop $0
   MessageBox MB_OK|MB_TOPMOST "Exiting installation JDK1.4 is required.."
   Quit
 Continue:
   Pop $R0
   Pop $0
FunctionEnd

/**
* Checks for the existence of MySQL5.0 .
* If one does not exists System installs it
*/
Function CheckMySQL
 ;Find the MySQL Installation in the Registry
 Call initMySQLCheck 
 StrCmp $R0 "" InstallMySQL 
 StrCmp $R0 "1" Noinstall
 StrCmp $R1 "1" localMySQL 

 Pop $R0
 Goto Continue

 localMySQL:
  MessageBox MB_YESNO|MB_TOPMOST "MySQL5.x was not found in your registry.$\r\
                      However a MYSQL_HOME environment variable is set.$\r\ 
                      Does it point to a working MySQL5.x (EFGDataImporter needs to run under MySQL5.x)?" IDNO InstallMySQL

  StrCpy $MYSQL_LOCATION "$R0"
  StrCpy $CURRENT_MySQL "$MySQL_LOCATION\bin"
  Goto Continue

InstallMySQL:
 MessageBox MB_YESNO|MB_TOPMOST "MySQL is not installed on this system. $\rEFGDataImporter needs to run \
 with MySQL.$\r Do you want to install it now?" IDNO Noinstall
 SetOutPath "$TEMP"
 SetOverwrite try
 File "${MySQL_SOURCE_DIR}\${MySQL_SOURCE_NAME}" 
 ExecWait "$TEMP\${MySQL_SOURCE_NAME}"
 sleep 5000
 Push $R0
 ReadRegStr $R0 HKLM "${MySQL_KEY}" "Location"
 StrCmp $R0 "" checkHKCU finishMySQLInstall
 
 finishMySQLInstall:
  StrCmp $R0 "" Noinstall 0
  StrCpy $MySQL_LOCATION "$R0"
  ;may cause problems if it is not installed in HKLM
  Pop $R0
  StrCpy $CURRENT_MYSQL "${MySQL_SERVICES_NAME}"
  StrCpy $CURRENT_MySQL_KEY "${MySQL_KEY}" 
  Delete "$TEMP\${MySQL_SOURCE_NAME}"
  Goto Continue

 checkHKCU:
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "${MySQL_KEY}" "Location"
  StrCmp $R0 "" Noinstall 

  StrCpy $MySQL_LOCATION "$R0"
  StrCpy $CURRENT_MySQL "${MySQL_SERVICES_NAME}"
  StrCpy $CURRENT_MySQL_KEY "${MySQL_KEY}" 
  Pop $R0
  Delete "$TEMP\${MySQL_SOURCE_NAME}"
  Goto Continue
 
 Noinstall:
  Pop $R0
  Pop $R1
 Continue:
FunctionEnd

/**
* Checks for the existence of a Tomcat4.XXX ot Tomcat5.0.XXX.
* If one does not exists System installs Tomcat 5.0
*/
Function CheckTomcat
 ;Find the Tomcat Installation in the Registry
 Call initTomcatCheck 
 StrCmp $R0 "" InstallTomcat 
 StrCmp $R0 "1" Noinstall
 StrCmp $R1 "1" localTomcat 

 Pop $R0
 Goto Continue

 localTomcat:
  MessageBox MB_YESNO|MB_TOPMOST "Neither Tomcat4 or Tomcat5.0 was found in your registry.$\r\
                      However a CATALINA_HOME environment variable is set.$\r\ 
                      Does it point to a working Tomcat4 or Tomcat5(EFGDataImporter needs to run under Tomcat4 or 5)?" IDNO InstallTomcat
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "$WEB_APPS_LOCATION\..\bin"
  Goto Continue

InstallTomcat:
 MessageBox MB_YESNO|MB_TOPMOST "Tomcat is not installed on this system. $\rEFGDataImporter needs to run \
 under Tomcat.$\r Do you want to install it now?" IDNO Noinstall
 SetOutPath "$TEMP"
 SetOverwrite try
 File "${TOMCAT_SOURCE_DIR}\${TOMCAT_SOURCE_NAME}" 
 ExecWait "$TEMP\${TOMCAT_SOURCE_NAME}"
 sleep 5000
 Push $R0
 ReadRegStr $R0 HKLM "${TOMCAT5_KEY}" "InstallPath"
 StrCmp $R0 "" checkHKCU51 finishTomcatInstall
 
 finishTomcatInstall:
  StrCmp $R0 "" Noinstall 0
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  ;may cause problems if it is not installed in HKLM
  Pop $R0
  StrCpy $CURRENT_TOMCAT "${TOMCAT5_SERVICES_NAME}"
  StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT5_KEY}" 
  Delete "$TEMP\${TOMCAT_SOURCE_NAME}"
  Goto Continue

 checkHKCU51:
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "${TOMCAT5_KEY}" "InstallPath"
  StrCmp $R0 "" Noinstall 
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "${TOMCAT5_SERVICES_NAME}"
  StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT5_KEY}" 
  Pop $R0
  Delete "$TEMP\${TOMCAT_SOURCE_NAME}"
  Goto Continue
 
 Noinstall:
  Pop $R0
  Pop $R1
 Continue:
FunctionEnd
;----------------------------------------
; Install and Uninstall Macros
;
;----------------------------------------
/**
* Remove an Environment variable
*/
!macro removeEnvVar UN
Function ${UN}removeEnvVar
  Push "${WEB_APPS_HOME}"
  Push "$WEB_APPS_LOCATION\..\"
  Call ${UN}RemoveFromEnvVar
;make sure it is gone
FunctionEnd
!macroend
!insertmacro removeEnvVar ""
!insertmacro removeEnvVar "un."
/**
* Remove information from the Path Environment variable
*/
!macro removePath UN
Function ${UN}removePath
 Push "${EFG2_IMPORTER_DIR}\${EFG2_IMPORTER_LIB}"
 Call ${UN}removeFromPath
 
FunctionEnd
!macroend
!insertmacro removePath ""
!insertmacro removePath "un."
/**
* Function calls to delete all files associated with installation
*/
!macro removeApplications UN
Function ${UN}removeApplications

Call ${UN}removeEFGDataImporter
Call ${UN}removeEFGDataImporterWebapps
;Call ${UN}removePath
;Call ${UN}removeEnvVar
 
Call ${UN}efgDeletes
FunctionEnd
!macroend
!insertmacro removeApplications ""
!insertmacro removeApplications "un."

/**
*Called to gracefully delete installed files and registry information
*/
!macro efgDeletes UN
Function ${UN}efgDeletes
 DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST_KEY}"
 DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_UNINST}"
 DeleteRegKey ${PRODUCT_UNINST_ROOT_KEY} "${PRODUCT_DIR_REG}"
FunctionEnd
!macroend
!insertmacro efgDeletes ""
!insertmacro efgDeletes "un."
/**
* Called for the removal of EFGDataImporter application
*/
!macro startEFGDataImporterRemoval UN
Function ${UN}startEFGDataImporterRemoval
 Pop $R0
 Push $R0
 ClearErrors
 
 ReadRegStr $R0 HKLM "${PRODUCT_UNINST_KEY}" "EFG2HOME" 
 StrCmp $R0 "" EFGHKCU finishEFGHKLM 

 finishEFGHKLM:
  StrCpy $INSTDIR $R0
  SetShellVarContext all 
  StrCpy $WriteEnvStr_RegKey "SYSTEM\CurrentControlSet\Control\Session Manager\Environment"
  
  Goto removeRO
;see if it was installed in HKCU with Tomcat 4
 EFGHKCU:
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "${PRODUCT_UNINST_KEY}" "EFG2HOME" 
  StrCmp $R0 "" removeRO finishEFGHKCU
  
 finishEFGHKCU:
  StrCpy $INSTDIR $R0
  SetShellVarContext current
  StrCpy $WriteEnvStr_RegKey "Environment"
  Goto removeRO  
  
 removeRO:
  Pop $R0 
  Goto Finish
Finish:
FunctionEnd
!macroend
!insertmacro startEFGDataImporterRemoval ""
!insertmacro startEFGDataImporterRemoval "un."

/**
* Initiliazes Tomcat
*/
!macro initTomcatCheck UN
Function ${UN}initTomcatCheck
 Pop $R0
 Pop $R1
 Push $R0
 ClearErrors
 ReadRegStr $R0 HKLM "${TOMCAT5_KEY}" "InstallPath"
 StrCmp $R0 "" checkHKCU5 finishTomcat5
  
 finishTomcat5:
  ;MessageBox MB_OK "Finish HKLM tomcat5"
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "${TOMCAT5_SERVICES_NAME}"
  StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT5_KEY}" 
  StrCpy $R0 "1"
  Goto Continue

 checkHKCU5:
 ;MessageBox MB_OK "check HKCU4"
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "${TOMCAT5_KEY}" "InstallPath"
  StrCmp $R0 "" checkTomcat4 0
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "${TOMCAT5_SERVICES_NAME}"
  StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT5_KEY}" 
   StrCpy $R0 "1"
  Goto Continue

 checkTomcat4:
  Pop $R0
  Push $R0
  clearErrors
  ReadRegStr $R0 HKLM "${TOMCAT4_KEY}" ""   
  StrCmp $R0 "" checkHKCU4 finishTomcat4
  
finishTomcat4:
  StrCpy $R0 "1"
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "${TOMCAT4_SERVICES_NAME}"
  StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT4_KEY}" 
  Goto Continue
  
 checkHKCU4:
 
   Pop $R0
   Push $R0
   ClearErrors
   ReadRegStr $R0 HKCU "${TOMCAT4_KEY}" ""
   StrCmp $R0 "" CheckCatalinaHome 0
   StrCpy $CATALINA_HOME "$R0"
   StrCpy $WEB_APPS_LOCATION "$R0\webapps"
   StrCpy $CURRENT_TOMCAT "${TOMCAT4_SERVICES_NAME}"
   StrCpy $CURRENT_TOMCAT_KEY "${TOMCAT4_KEY}" 
   StrCpy $R0 "1"
   Goto Continue
 
  CheckCatalinaHome:
    Pop $R0
    Push $R0
    ClearErrors
    
    ;check environment variables
    ReadEnvStr $R0 CATALINA_HOME
    IfErrors 0 catalina
    Pop $R0
    Push $R0
    ClearErrors
    StrCpy $R0 ""
    StrCpy $R1 ""
    Goto Continue

  catalina:
    Pop $R1
    Push $R1
    ClearErrors
    StrCpy $R1 "1"
 Continue:
FunctionEnd
!macroend
!insertmacro initTomcatCheck ""
!insertmacro initTomcatCheck "un."
/**
* Initiliazes Tomcat
*/
!macro initMySQLCheck UN
Function ${UN}initMySQLCheck
 Pop $R0
 Pop $R1
 Push $R0
 ClearErrors
 ReadRegStr $R0 HKLM "${MYSQL_KEY}" "Location"
 StrCmp $R0 "" checkHKCU finishMySQL
  
 finishMySQL:
  
  StrCpy $MYSQL_LOCATION "$R0"
  StrCpy $CURRENT_MYSQL "${MYSQL_SERVICES_NAME}"
  StrCpy $CURRENT_MYSQL_KEY "${MYSQL_KEY}" 
  StrCpy $R0 "1"
  Goto Continue

 checkHKCU:
  
  Pop $R0
  Push $R0
  ClearErrors
  ReadRegStr $R0 HKCU "${MYSQL_KEY}" "Location"
  StrCmp $R0 "" CheckMySQLHome 0
  StrCpy $MYSQL_LOCATION "$R0"
  StrCpy $CURRENT_MYSQL "${MYSQL_SERVICES_NAME}"
  StrCpy $CURRENT_MYSQL_KEY "${MYSQL_KEY}" 
   StrCpy $R0 "1"
  Goto Continue


  CheckMySQLHome:
   
    Pop $R0
    Push $R0
    ClearErrors
    
    ;check environment variables
    ReadEnvStr $R0 MYSQL_HOME
    IfErrors 0 mysql
    Pop $R0
    Push $R0
    ClearErrors
    StrCpy $R0 ""
    StrCpy $R1 ""
    Goto Continue

  mysql:
   
    Pop $R1
    Push $R1
    ClearErrors
    StrCpy $R1 "1"
 Continue:
FunctionEnd
!macroend
!insertmacro initMySQLCheck ""
!insertmacro initMySQLCheck "un."
/**
*Start the removal of EFGDataImporter web application
*/
!macro removeEFGDataStuff UN
Function ${UN}removeEFGDataStuff


  RMDIR /r /REBOOTOK "$SMPROGRAMS\EFGDataImporter${PRODUCT_VERSION}"
  Delete "$DESKTOP\${IMPORTER_LINK_NAME}.lnk"
  RMDIR /r /REBOOTOK $INSTDIR
  clearErrors

  Delete "$CATALINA_HOME\conf\Catalina\localhost\efg2.xml" 
 
  ClearErrors
  Delete "$CATALINA_HOME\common\lib\mysqldriver.jar" 
 
  ClearErrors
  ExecWait '"${RENAME_TOMCAT_USERS_BATCH}" "$CATALINA_HOME\${TOMCAT_USERS_OLD_FILE}" "$CATALINA_HOME\${TOMCAT_USERS_CURRENT_FILE}"'
  sleep 5000
  ;Rename "$CATALINA_HOME\conf\tomcat-users.xml_EFG_old" "$CATALINA_HOME\conf\tomcat-users.xml"
  ClearErrors
  
   ; RMDIR /r /REBOOTOK "$WEB_APPS_LOCATION\keys" 

    ;execute java to write/edit tomcat-users file
    ;Restore Tomcat users file
  ;Delete "$WEB_APPS_LOCATION\${WEB_APPS_WAR}"
 
 FunctionEnd
!macroend
!insertmacro removeEFGDataStuff ""
!insertmacro removeEFGDataStuff "un."
/**
*Start the removal of EFGDataImporter web application
*/
!macro removeEFGDataImporterWebapps UN
Function ${UN}removeEFGDataImporterWebapps

  Call ${UN}initTomcatCheck 
  StrCmp $R0 "" end ; no tomcat on the system
  StrCmp $R1 "1" localTomcat ; tomcat installed locally and not in registry
  StrCmp $R0 "1" foundReg  ;Tomcat is information is in registry 
 
 localTomcat:
  StrCpy $CATALINA_HOME "$R0"
  StrCpy $WEB_APPS_LOCATION "$R0\webapps"
  StrCpy $CURRENT_TOMCAT "$WEB_APPS_LOCATION\..\bin"
  Push $CURRENT_TOMCAT
  Push "bin" 
  Push "<"
  Call ${UN}StrLoc
  Pop $R0
  StrCmp $R0 "" end 0
  
  ExecWait '"$CURRENT_TOMCAT\shutdown.bat"'
  sleep 5000
  Call ${UN}removeEFGDataStuff
  ExecWait '"$CURRENT_TOMCAT\startup.bat"'
  sleep 5000
  Goto end
  
  foundReg: 
   ExecWait 'cmd /C net stop "$CURRENT_TOMCAT"'
   sleep 5000
   Call ${UN}removeEFGDataStuff
  
   ExecWait 'cmd /C net start "$CURRENT_TOMCAT"'  
   sleep 5000
  end:
 FunctionEnd
!macroend
!insertmacro removeEFGDataImporterWebapps ""
!insertmacro removeEFGDataImporterWebapps "un."


/**
*Start the removal of EFGDataImporter application
*/
!macro removeEFGDataImporter UN
Function ${UN}removeEFGDataImporter
 Call ${UN}startEFGDataImporterRemoval
FunctionEnd
!macroend
!insertmacro removeEFGDataImporter ""
!insertmacro removeEFGDataImporter "un."


/**
  Indicates the position of a substring within a given String
   $R0 = StartPoint (input)
   $R1 = SubString (input)
   $R2 = String (input)
   $R3 = SubStringLen (temp)
   $R4 = StrLen (temp)
   $R5 = StartCharPos (temp)
   $R6 = TempStr (temp)
*/
!macro Strloc UN
Function ${UN}StrLoc

  ;Get input from user
  Exch $R0
  Exch
  Exch $R1
  Exch 2
  Exch $R2
  Push $R3
  Push $R4
  Push $R5
  Push $R6
 
  ;Get "String" and "SubString" length
  StrLen $R3 $R1
  StrLen $R4 $R2
  ;Start "StartCharPos" counter
  StrCpy $R5 0
 
  ;Loop until "SubString" is found or "String" reaches its end
  ${Do}
    ;Remove everything before and after the searched part ("TempStr")
    StrCpy $R6 $R2 $R3 $R5
 
    ;Compare "TempStr" with "SubString"
    ${If} $R6 == $R1
      ${If} $R0 == `<`
        IntOp $R6 $R3 + $R5
        IntOp $R0 $R4 - $R6
      ${Else}
        StrCpy $R0 $R5
      ${EndIf}
      ${ExitDo}
    ${EndIf}
    ;If not "SubString", this could be "String"'s end
    ${If} $R5 >= $R4
      StrCpy $R0 ``
      ${ExitDo}
    ${EndIf}
    ;If not, continue the loop
    IntOp $R5 $R5 + 1
  ${Loop}
 
  ;Return output to user
  Pop $R6
  Pop $R5
  Pop $R4
  Pop $R3
  Pop $R2
  Exch
  Pop $R1
  Exch $R0
FunctionEnd
!macroend
!insertmacro StrLoc ""
!insertmacro Strloc "un."

;--------------------------------
;Uninstaller Sections
;---------------------------------
/**
* Called during uninstallation
*/
Section "un.install"
MessageBox MB_YESNO|MB_TOPMOST "Unistalling this application will cause you to lose all$\r\
                      of the keys/configuration that you have deployed to the web application.$\r\
                       Do you still want to uninstall?" IDNO Noremove 
 Call un.removeApplications
 SetAutoClose true
 Goto end
Noremove:
 Quit
end:

SectionEnd

;--------------------------------
;Uninstaller Functions
;---------------------------------

/**
* Calls if uninstallation is successful
*/
Function un.onUninstSuccess
  HideWindow
  MessageBox MB_ICONINFORMATION|MB_OK|MB_TOPMOST "$(^Name) was successfully removed from your computer."
FunctionEnd

/**
* Calls to initilialize uninstallation.
*It is a Singleton so no tow instances of the unistaller/installer can be running at the same
*time on the same system.
*/
Function un.onInit
System::Call "kernel32::CreateMutexA(i 0, i 0, t '$(^Name)') i .r0 ?e"
 Pop $0
 StrCmp $0 0 launch
  StrLen $0 "$(^Name)"
  IntOp $0 $0 + 1
 loop:
   FindWindow $1 '#32770' '' 0 $1
   IntCmp $1 0 +4
   System::Call "user32::GetWindowText(i r1, t .r2, i r0) i."
   StrCmp $2 "$(^Name)" 0 loop
   System::Call "user32::SetForegroundWindow(i r1) i."
    MessageBox MB_OK|MB_ICONEXCLAMATION|MB_TOPMOST "The uninstaller is already running."
   Abort
   Goto efg_installed
   
 launch: 
  MessageBox MB_ICONQUESTION|MB_YESNO|MB_DEFBUTTON2|MB_TOPMOST "Are you sure you want to completely remove $(^Name) and all of its components?" IDYES +2
  Quit
  IfFileExists $INSTDIR\uninstEFGDataImporter${PRODUCT_VERSION}.exe efg_installed
    MessageBox MB_YESNO|MB_TOPMOST "It does not appear that the $(^Name) application is installed in the directory '$INSTDIR'.$\r$\nContinue anyway\
	 (not recommended)?" IDYES efg_installed
    Abort "Uninstall aborted by user"
 efg_installed:

FunctionEnd




